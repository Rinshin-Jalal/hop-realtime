declare type AnyMethod = (...args: any[]) => any;
declare function create<T extends object>(): {
    methods: <M extends object>(methods: M[keyof M] extends AnyMethod ? M & ThisType<T & M> : never) => {
        parse(json: string): T & M;
        from(data: T): T & M;
    };
};
declare type Infer<T> = T extends {
    parse(json: string): infer R;
} ? R : never;

export { Infer, create };
